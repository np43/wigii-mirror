<?php
/**
 *  This file is part of Wigii (R) software.
 *  Wigii is developed to inspire humanity. To Humankind we offer Gracefulness, Righteousness and Goodness.
 *  
 *  Wigii is free software: you can redistribute it and/or modify it 
 *  under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *  
 *  Wigii is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 *  See the GNU General Public License for more details.
 *
 *  A copy of the GNU General Public License is available in the Readme folder of the source code.  
 *  If not, see <http://www.gnu.org/licenses/>.
 *
 *  @copyright  Copyright (c) 2016  Wigii.org
 *  @author     <http://www.wigii.org/system>      Wigii.org 
 *  @link       <http://www.wigii-system.net>      <https://github.com/wigii/wigii>   Source Code
 *  @license    <http://www.gnu.org/licenses/>     GNU General Public License
 */

/**
 * The data flow service
 * Created by CWE on 28 mai 2013
 */
interface DataFlowService
{
	// Data flow sources and processing
	
	/**
	 * Takes the string as an input and processes it through the list of selected flow activities
	 * @param Principal $principal authenticated user performing the operation
	 * @param string $str the string to process
	 * @param DataFlowActivitySelectorList $dataFlowActivitySelectorList the list of selected data flow activities
	 * @param MultiplexedEvent|WigiiEvents|Boolean $wigiiEventsSubscriber an optional subscriber to wigii events generated by this data flow or sub data flows. 
	 * An object which implements MultiplexedEvent or WigiiEvents interface.
	 * Or a boolean equal explicitely to false. In that case, any wigii events triggered in this dataflow or in any sub dataflows, 
	 * will not pop up to any calling subscriber higher in the stack.
	 * This can be used to execute non-observable dataflows or prevent loops.
	 * By default, no subscriber is defined at this stage, but events generated by sub dataflows will pop up to any calling subscriber. 
	 * @throws DataFlowServiceException in case of error
	 * @return mixed optionally returns some data if the last stage of the list of activities writes some output.
	 */
	public function processString($principal, $str, $dataFlowActivitySelectorList, $wigiiEventsSubscriber=null);
	
	/**
	 * Takes the field list as an input and processes it through the list of selected flow activities	 
	 * @param Principal $principal authenticated user performing the operation
	 * @param FieldList $fieldList the list of fields to be processed. 
	 * The fields will be wrapped into a FieldWithSelectedSubfields model and then
	 * passed one by one to the list of DataFlow activities
	 * @param DataFlowActivitySelectorList $dataFlowActivitySelectorList the list of selected data flow activities
	 * @param FieldSelectorList $fieldSelectorList if not null, then only the selected fields with selected subfields will be processed
	 * Caution: does not support element attribute selectors.
	 * @param MultiplexedEvent|WigiiEvents|Boolean $wigiiEventsSubscriber an optional subscriber to wigii events generated by this data flow or sub data flows. 
	 * An object which implements MultiplexedEvent or WigiiEvents interface.
	 * Or a boolean equal explicitely to false. In that case, any wigii events triggered in this dataflow or in any sub dataflows, 
	 * will not pop up to any calling subscriber higher in the stack.
	 * This can be used to execute non-observable dataflows or prevent loops.
	 * By default, no subscriber is defined at this stage, but events generated by sub dataflows will pop up to any calling subscriber. 
	 * @throws DataFlowServiceException in case of error
	 * @return mixed optionally returns some data if the last stage of the list of activities writes some output.
	 */
	public function processFieldList($principal, $fieldList, $dataFlowActivitySelectorList, $fieldSelectorList=null, $wigiiEventsSubscriber=null);
	
	/**
	 * Takes the object list as an input and processes its content through the selected flow activities
	 * @param Principal $principal authenticated user performing the operation
	 * @param ObjectList $objectList the list of objects to be processed
	 * @param DataFlowActivitySelectorList $dataFlowActivitySelectorList the list of selected data flow activities
	 * @param MultiplexedEvent|WigiiEvents|Boolean $wigiiEventsSubscriber an optional subscriber to wigii events generated by this data flow or sub data flows. 
	 * An object which implements MultiplexedEvent or WigiiEvents interface.
	 * Or a boolean equal explicitely to false. In that case, any wigii events triggered in this dataflow or in any sub dataflows, 
	 * will not pop up to any calling subscriber higher in the stack.
	 * This can be used to execute non-observable dataflows or prevent loops.
	 * By default, no subscriber is defined at this stage, but events generated by sub dataflows will pop up to any calling subscriber. 
	 * @throws DataFlowServiceException in case of error
	 * @return mixed optionally returns some data if the last stage of the list of activities writes some output.
	 */
	public function processObjectList($principal, $objectList, $dataFlowActivitySelectorList, $wigiiEventsSubscriber=null);
	
	/**
	 * Takes an input data flow and processes its content through the selected flow activities
	 * @param Principal $principal authenticated user performing the operation
	 * @param InputDataFlow $inputDataFlow the input data flow to be processed
	 * @param DataFlowActivitySelectorList $dataFlowActivitySelectorList the list of selected data flow activities
	 * @param Boolean $freeMemoryOfSource if true, then calls method freeMemory (if defined) on the inputDataFlow object once all the data has been processed,
	 * if false, then nothing is done on the source, the caller should free memory if needed.
	 * @param MultiplexedEvent|WigiiEvents|Boolean $wigiiEventsSubscriber an optional subscriber to wigii events generated by this data flow or sub data flows. 
	 * An object which implements MultiplexedEvent or WigiiEvents interface.
	 * Or a boolean equal explicitely to false. In that case, any wigii events triggered in this dataflow or in any sub dataflows, 
	 * will not pop up to any calling subscriber higher in the stack.
	 * This can be used to execute non-observable dataflows or prevent loops.
	 * By default, no subscriber is defined at this stage, but events generated by sub dataflows will pop up to any calling subscriber.
	 * @param String|Number $cacheKey An optional cache key. If set, then the source content will be cached before pushing the data into the flow.
	 * If later on, a call with the same cache key occurs, then the source is not evaluated again, but the content of the cache is directly dumped
	 * into the flow. 
	 * @throws DataFlowServiceException in case of error
	 * @return mixed optionally returns some data if the last stage of the list of activities writes some output.
	 */
	public function processInputDataFlow($principal, $inputDataFlow, $dataFlowActivitySelectorList, 
		$freeMemoryOfSource=true, $wigiiEventsSubscriber=null, $cacheKey=null);
	
	/**
	 * Takes a data flow dumpable object and processes its content through the selected flow activities
	 * @param Principal $principal authenticated user performing the operation
	 * @param DataFlowDumpable $dataFlowDumpable the object that should dump itself in the data flow
	 * @param DataFlowActivitySelectorList $dataFlowActivitySelectorList the list of selected data flow activities
	 * @param Boolean $freeMemoryOfSource if true, then calls method freeMemory (if defined) on the dataFlowDumpable object once all the data has been processed,
	 * if false, then nothing is done on the source, the caller should free memory if needed.
	 * @param MultiplexedEvent|WigiiEvents|Boolean $wigiiEventsSubscriber an optional subscriber to wigii events generated by this data flow or sub data flows. 
	 * An object which implements MultiplexedEvent or WigiiEvents interface.
	 * Or a boolean equal explicitely to false. In that case, any wigii events triggered in this dataflow or in any sub dataflows, 
	 * will not pop up to any calling subscriber higher in the stack.
	 * This can be used to execute non-observable dataflows or prevent loops.
	 * By default, no subscriber is defined at this stage, but events generated by sub dataflows will pop up to any calling subscriber. 
	 * @param String|Number $cacheKey An optional cache key. If set, then the source content will be cached before pushing the data into the flow.
	 * If later on, a call with the same cache key occurs, then the source is not evaluated again, but the content of the cache is directly dumped
	 * into the flow.
	 * @throws DataFlowServiceException in case of error
	 * @return mixed optionally returns some data if the last stage of the list of activities writes some output.
	 */
	public function processDumpableObject($principal, $dataFlowDumpable, $dataFlowActivitySelectorList, 
		$freeMemoryOfSource=true, $wigiiEventsSubscriber=null, $cacheKey=null);
	
	/**
	 * Processes the DataFlowSelector object
	 * @param Principal $principal authenticated user performing the operation
	 * @param DataFlowSelector $dataFlowSelector the data flow selector describing the data flow to be executed (source + dataflow activity selector list)
	 * @param Boolean $freeMemoryOfSource if true, then calls method freeMemory (if defined) on the souce object once all the data has been processed,
	 * if false, then nothing is done on the source, the caller should free memory if needed.
	 * @param MultiplexedEvent|WigiiEvents|Boolean $wigiiEventsSubscriber an optional subscriber to wigii events generated by this data flow or sub data flows. 
	 * An object which implements MultiplexedEvent or WigiiEvents interface.
	 * Or a boolean equal explicitely to false. In that case, any wigii events triggered in this dataflow or in any sub dataflows, 
	 * will not pop up to any calling subscriber higher in the stack.
	 * This can be used to execute non-observable dataflows or prevent loops.
	 * By default, no subscriber is defined at this stage, but events generated by sub dataflows will pop up to any calling subscriber. 
	 * @param String|Number $cacheKey An optional cache key. If set, then the source content will be cached before pushing the data into the flow.
	 * If later on, a call with the same cache key occurs, then the source is not evaluated again, but the content of the cache is directly dumped
	 * into the flow.
	 * @throws DataFlowServiceException in case of error
	 * @return mixed optionally returns some data if the last stage of the list of activities writes some output.
	 */
	public function processDataFlowSelector($principal, $dataFlowSelector, 
		$freeMemoryOfSource=true, $wigiiEventsSubscriber=null, $cacheKey=null);
	
	/**
	 * Processes the DataFlowSelectorList object
	 * @param Principal $principal authenticated user performing the operation
	 * @param DataFlowSelectorList $dataFlowSelectorList the data flow selector list to be processed.
	 * @param DataFlowResultList $dataFlowResultList an optional list to store the data flows result.
	 * @param Boolean $freeMemoryOfSource if true, then calls method freeMemory (if defined) on the souce object once all the data has been processed,
	 * if false, then nothing is done on the source, the caller should free memory if needed.
	 * @param MultiplexedEvent|WigiiEvents|Boolean $wigiiEventsSubscriber an optional subscriber to wigii events generated by this data flow or sub data flows.
	 * An object which implements MultiplexedEvent or WigiiEvents interface.
	 * Or a boolean equal explicitely to false. In that case, any wigii events triggered in this dataflow or in any sub dataflows,
	 * will not pop up to any calling subscriber higher in the stack.
	 * This can be used to execute non-observable dataflows or prevent loops.
	 * By default, no subscriber is defined at this stage, but events generated by sub dataflows will pop up to any calling subscriber.
	 * @throws DataFlowServiceException in case of error
	 * @return DataFlowResultList optionally fills a provided DataFlowResultList with the result of the executed data flows. 
	 */
	public function processDataFlowSelectorList($principal, $dataFlowSelectorList, $dataFlowResultList=null,
		$freeMemoryOfSource=true, $wigiiEventsSubscriber=null);
	
	/**
	 * Reads the data coming from the source and processes it through the selected flow activities 
	 * @param Principal $principal authenticated user performing the operation
	 * @param DataFlowDumpable|InputDataFlow|ObjectList|Array|DataFlowSelector $source the data source to be processed.
	 * @param DataFlowActivitySelectorList $dataFlowActivitySelectorList the list of selected data flow activities
	 * @param Boolean $freeMemoryOfSource if true, then calls method freeMemory (if defined) on the source object once all the data has been processed,
	 * if false, then nothing is done on the source, the caller should free memory if needed.
	 * @param MultiplexedEvent|WigiiEvents|Boolean $wigiiEventsSubscriber an optional subscriber to wigii events generated by this data flow or sub data flows. 
	 * An object which implements MultiplexedEvent or WigiiEvents interface.
	 * Or a boolean equal explicitely to false. In that case, any wigii events triggered in this dataflow or in any sub dataflows, 
	 * will not pop up to any calling subscriber higher in the stack.
	 * This can be used to execute non-observable dataflows or prevent loops.
	 * By default, no subscriber is defined at this stage, but events generated by sub dataflows will pop up to any calling subscriber. 
	 * @param String|Number $cacheKey An optional cache key. If set, then the source content will be cached before pushing the data into the flow.
	 * If later on, a call with the same cache key occurs, then the source is not evaluated again, but the content of the cache is directly dumped
	 * into the flow.
	 * @throws DataFlowServiceException in case of error
	 * @return mixed optionally returns some data if the last stage of the list of activities writes some output.
	 */
	public function processDataSource($principal, $source, $dataFlowActivitySelectorList,
		$freeMemoryOfSource=true, $wigiiEventsSubscriber=null, $cacheKey=null);
	
	// Data flow connector
	
	/**
	 * Starts a new data flow stream
	 * @param Principal $principal authenticated user performing the operation
	 * @param DataFlowActivitySelectorList $dataFlowActivitySelectorList the DataFlowActivity selector list describing the pipe of activities
	 * @return DataFlowContext a DataFlowContext instance referencing the open stream
	 * @throws DataFlowServiceException in case of error
	 */
	public function startStream($principal, $dataFlowActivitySelectorList);
	
	/**
	 * Processes a data chunk in the context of an open stream
	 * @param mixed $data chunk of data to be processed. 
	 * Must be compatible with the first step of the pipe of activities
	 * @param DataFlowContext $dataFlowContext the reference to the current open stream
	 * @throws DataFlowServiceException in case of error
	 */
	public function processDataChunk($data, $dataFlowContext);
	
	/**
	 * Ends the current running data flow stream
	 * After the call of this method, the DataFlowContext is closed 
	 * and any calls to processDataChunk will fail.
	 * @param DataFlowContext $dataFlowContext the reference to the current open stream
	 * @throws DataFlowServiceException in case of error
	 * @return mixed optionally returns some data if the last stage of the list of activities writes some output.
	 */
	public function endStream($dataFlowContext);
	
	/**
	 * Processes all the data at once.
	 * @param Principal $principal authenticated user performing the operation
	 * @param mixed $data the data to process
	 * @param DataFlowActivitySelectorList $dataFlowActivitySelectorList the DataFlowActivity selector list describing the pipe of activities
	 * @param MultiplexedEvent|WigiiEvents|Boolean $wigiiEventsSubscriber an optional subscriber to wigii events generated by this data flow or sub data flows. 
	 * An object which implements MultiplexedEvent or WigiiEvents interface.
	 * Or a boolean equal explicitely to false. In that case, any wigii events triggered in this dataflow or in any sub dataflows, 
	 * will not pop up to any calling subscriber higher in the stack.
	 * This can be used to execute non-observable dataflows or prevent loops.
	 * By default, no subscriber is defined at this stage, but events generated by sub dataflows will pop up to any calling subscriber. 
	 * @throws DataFlowServiceException in case of error
	 * @return mixed optionally returns some data if the last stage of the list of activities writes some output.
	 */
	public function processWholeData($principal, $data, $dataFlowActivitySelectorList, $wigiiEventsSubscriber = null);
	
	
	// Data Flow activity result callback
	
	/**
	 * Processes some result data chunk from the current executing data flow activity
	 * The data flow service can synchronously trigger the next step of the flow,
	 * or differ the execution, implementation is free to choose the best strategy.
	 * @param DataFlowContext $dataFlowContext the current execution data flow context
	 * @param mixed $resultData some result data chunk. can be any kind of object
	 * @param DataFlowActivity $dataFlowActivity a reference of the current executing data flow activity
	 * @throws DataFlowServiceException in case of error
	 */
	public function processResultFromActivity($dataFlowContext, $resultData, $dataFlowActivity);	

	/**
	 * Dispatches a Wigii multiplexed event
	 * See interface MultiplexedEvent.
	 */
	public function dispatchWigiiEvent($dataFlowContext, $eventName, $entityName, $module, $object);
	
	/**
	 * Returns true if WigiiEvents are enabled in this context
	 */
	public function areWigiiEventsEnabled($dataFlowContext);
	
	// DataFlow activities service provider

	/**
	 * Returns a fresh reseted instance of a WigiiXmlSaxParser data flow activity
	 * in this data flow context
	 */
	public function getWigiiXmlSaxParserDFA($dataFlowContext);
	
	/**
	 * Recycles the instance of a WigiiXmlSaxParser data flow activity.
	 * Precondition: assumes that endOfStream has already been called and
	 * that it is valid to prepare the object to receive a new call of startOfStream
	 * @param WigiiXmlSaxParserDFA $saxParser the WigiiXmlSaxParserDFA instance
	 * @param DataFlowContext $dataFlowContext the current dataflow context
	 */
	public function recycleWigiiXmlSaxParserDFA($saxParser, $dataFlowContext);
	
	
	// DataFlow activities output filter service provider

	/**
	 * Returns a fresh reseted instance of a WigiiXmlWriter data flow activity output filter
	 * in this data flow context
	 * @param DataFlowActivity $dataFlowActivity a reference to parent DataFlowActivity
	 */
	public function getWigiiXmlWriterDFAOF($dataFlowContext, $dataFlowActivity);
	
	/**
	 * Recycles the instance of a WigiiXmlWriter data flow activity output filter.
	 * Precondition: assumes that endOfStream has already been called and
	 * that it is valid to prepare the object to receive a new call of startOfStream
	 * @param WigiiXmlWriterDFAOF $xmlWriter the WigiiXmlXmlWriterDFAOF instance
	 * @param DataFlowContext $dataFlowContext the current dataflow context
	 */
	public function recycleWigiiXmlWriterDFAOF($xmlWriter, $dataFlowContext);
}