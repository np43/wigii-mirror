/**
 *  This file is part of Wigii (R) software.
 *  Wigii is developed to inspire humanity. To Humankind we offer Gracefulness, Righteousness and Goodness.
 *  
 *  Wigii is free software: you can redistribute it and/or modify it 
 *  under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *  
 *  Wigii is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 *  See the GNU General Public License for more details.
 *
 *  A copy of the GNU General Public License is available in the Readme folder of the source code.  
 *  If not, see <http://www.gnu.org/licenses/>.
 *
 *  @copyright  Copyright (c) 2016  Wigii.org
 *  @author     <http://www.wigii.org/system>      Wigii.org 
 *  @link       <http://www.wigii-system.net>      <https://github.com/wigii/wigii>   Source Code
 *  @license    <http://www.gnu.org/licenses/>     GNU General Public License
 */
 
/*
 * This file contains a QlikView script that allows to extract from a Wigii database structure
 * all the necessary data. The extraction is done in csv and in qvd
 * The first part of this script is commented and is an example of what should be added
 * at the start of the QlikScript that include this one.
 * Modified by Medair (LWR,SSA) in 2017 for maintenance purposes.
 */


//PLEASE incorporate the following section into your Qlik script and change the values as necessary
/*************

//General format settings
SET ThousandSep="'";
SET DecimalSep='.';
SET MoneyThousandSep="'";
SET MoneyDecimalSep='.';
SET MoneyFormat='$#''##0;-$#''##0';
SET TimeFormat='hh:mm:ss';
SET DateFormat='DD/MM/YYYY';
SET TimestampFormat='DD/MM/YYYY hh:mm:ss[.fff]';
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';

//END of section to incorporate
*******************/


///$tab Filters
//**************************
// Reduce Fields, Elements, and Groups to some namespace and modules
//**************************

//load fields for a set of namespace and modules

IF NOT isNull(fileSize('Filters.xlsx')) THEN
	[Filters]:
	LOAD *, RowNo() as f.counter;
	LOAD f.wigiiNamespace, 
	     f.modulename
	FROM
	[Filters.xlsx]
	(ooxml, embedded labels, table is Filters);


	[Sys_fields]:
	LOAD *, sys.wigiiNamespace&'-'&sys.modulename&'-'&sys.fieldname as sys.key, RowNo() as sys.counter;
	LOAD sys.wigiiNamespace, 
	     sys.modulename,
	     sys.fieldname
	FROM
	[Filters.xlsx]
	(ooxml, embedded labels, table is Sys_fields);
	
else
	[Filters]:
	LOAD *, RowNo() as f.counter;
	LOAD * INLINE [
	    f.wigiiNamespace, f.modulename
	];

	[Sys_fields]:
	LOAD *, sys.wigiiNamespace&'-'&sys.modulename&'-'&sys.fieldname as sys.key, RowNo() as f.counter;
	LOAD * INLINE [
	    sys.wigiiNamespace, sys.modulename, sys.fieldname
	];
endif




///$tab Wigii Structure Tables
//**************************
// Wigii strucute table
// script MUST run before the Wigii DT script in order to interpret correctly the exist id_element
//**************************

//
[Groups]: LOAD * FROM [Groups.qvd] (qvd);
[Elements]: LOAD * FROM [ElementsWithWigiiNamespace.qvd] (qvd);
[Element Group pairing]: LOAD * FROM [Elements_Groups.qvd] (qvd);
[MultipleAttributs]: LOAD * FROM [MultipleAttributs.qvd] (qvd);
[Attributs]: LOAD * FROM [Attributs.qvd] (qvd);
[Dates]: LOAD * FROM [Dates.qvd] (qvd);
[Links]: LOAD * FROM [Links.qvd] (qvd);
[Booleans]: LOAD * FROM [Booleans.qvd] (qvd);
[Times]: LOAD * FROM [Times.qvd] (qvd);
[Floats]: LOAD * FROM [Floats.qvd] (qvd);
[Urls]: LOAD * FROM [Urls.qvd] (qvd);
[Numerics]: LOAD * FROM [Numerics.qvd] (qvd);
[Addresses]: LOAD * FROM [Addresses.qvd] (qvd);
[Varchars]: LOAD * FROM [Varchars.qvd] (qvd);
[TimeRanges]: LOAD * FROM [TimeRanges.qvd] (qvd);
[Blobs]: LOAD * FROM [Blobs.qvd] (qvd);
[Emails]: LOAD * FROM [Emails.qvd] (qvd);
[Texts]: LOAD * FROM [Texts.qvd] (qvd);
[Strings]: LOAD * FROM [Strings.qvd] (qvd);
[Files]: LOAD * FROM [Files.qvd] (qvd);


///$tab FieldList

//**************************
// Create a Field list with all the fields per datatype
//**************************

[Field list]:
Load 
	'Dates' as datatype,
	id_element,
	field as fieldname,
	'Dates - '&field as dt_fieldname
Resident [Dates];

Load 
	'Links' as datatype,
	id_element,
	field as fieldname,
	'Links - '&field as dt_fieldname
Resident [Links];

Load 
	'MultipleAttributs' as datatype,
	id_element,
	field as fieldname,
	'MultipleAttributs - '&field as dt_fieldname
Resident [MultipleAttributs];

Load 
	'Attributs' as datatype,
	id_element,
	field as fieldname,
	'Attributs - '&field as dt_fieldname
Resident [Attributs];

Load 
	'Strings' as datatype,
	id_element,
	field as fieldname,
	'Strings - '&field as dt_fieldname
Resident [Strings];

Load 
	'Booleans' as datatype,
	id_element,
	field as fieldname,
	'Booleans - '&field as dt_fieldname
Resident [Booleans];

Load 
	'Times' as datatype,
	id_element,
	field as fieldname,
	'Times - '&field as dt_fieldname
Resident [Times];

Load 
	'Floats' as datatype,
	id_element,
	field as fieldname,
	'Floats - '&field as dt_fieldname
Resident [Floats];

Load 
	'Urls' as datatype,
	id_element,
	field as fieldname,
	'Urls - '&field as dt_fieldname
Resident [Urls];

Load 
	'Numerics' as datatype,
	id_element,
	field as fieldname,
	'Numerics - '&field as dt_fieldname
Resident [Numerics];

Load 
	'Addresses' as datatype,
	id_element,
	field as fieldname,
	'Addresses - '&field as dt_fieldname
Resident [Addresses];

Load 
	'Varchars' as datatype,
	id_element,
	field as fieldname,
	'Varchars - '&field as dt_fieldname
Resident [Varchars];

Load 
	'TimeRanges' as datatype,
	id_element,
	field as fieldname,
	'TimeRanges - '&field as dt_fieldname
Resident [TimeRanges];

Load 
	'Emails' as datatype,
	id_element,
	field as fieldname,
	'Emails - '&field as dt_fieldname
Resident [Emails];

Load 
	'Blobs' as datatype,
	id_element,
	field as fieldname,
	'Blobs - '&field as dt_fieldname
Resident [Blobs];

Load 
	'Texts' as datatype,
	id_element,
	field as fieldname,
	'Texts - '&field as dt_fieldname
Resident [Texts];

Load 
	'Files' as datatype,
	id_element,
	field as fieldname,
	'Files - '&field as dt_fieldname
Resident [Files];



///$tab Namespace - Module - Field]

//**************************
// Create a table with all the fields per namespace and module
//**************************

//start from the Field list table
NoConcatenate [tempNMFE]:
Load * Resident [Field list];
//add modulename and id_element_root
Left Join Load
	id_element,
	id_element_root,
	modulename,
	wigiiNamespace
Resident Elements;

NoConcatenate [tempNMF]:
load Distinct
	wigiiNamespace,
	modulename,
	fieldname,
	datatype
Resident [tempNMFE];

NoConcatenate [Namespace - Module - Field]:
load Distinct
	wigiiNamespace as nmf.wigiiNamespace,
	modulename as nmf.modulename,
	fieldname as nmf.fieldname,
	datatype as nmf.datatype,
	datatype&' - '&fieldname as [nmf.dt-field]
Resident [tempNMF]
order by wigiiNamespace asc, modulename asc, fieldname asc;

NoConcatenate [DT - Field]:
load Distinct
	nmf.datatype as dtf.datatype,
	nmf.fieldname as dtf.fieldname,
	[nmf.dt-field] as [dtf.dt-field]
Resident [Namespace - Module - Field]
order by nmf.fieldname asc, nmf.datatype asc;

drop Table [tempNMFE];
drop Table [tempNMF];


store [Namespace - Module - Field] into [Namespace - Module - Field].csv (txt);
store [Namespace - Module - Field] into [Namespace - Module - Field].qvd;
store [DT - Field] into [DT - Field].csv (txt);
store [DT - Field] into [DT - Field].qvd;



///$tab Reduction


//remove trashbin folders and sub groups

if(isNull(vWildCardTrashbinFilter)) then
	LET vWildCardTrashbinFilter = '*trashbin*';
end if

if(vWildCardTrashbinFilter <> False()) then
	//lookup trashbin and folders in trashbin
	NoConcatenate [trashGroups]:
	LOAD id_group as idTrashGroup //, groupname
	Resident [Groups]
	Where 
	//*** !! WARNING
	//filter out any Group named *trashbin*
	WildMatch(groupname, '$(vWildCardTrashbinFilter)')
	;
	//include all the children of those folders
	Concatenate (trashGroups) load id_group as idTrashGroup
	Resident Groups_Groups
	where Exists(idTrashGroup, id_group_owner);

ELSE
	[trashGroups]:
	LOAD * INLINE [
	    idTrashbinFilter
	    -1
	];


ENDIF

Let vFilterLength=peek('f.counter',-1,'Filters');

if vFilterLength > 1 then

	//reduce [Namespace - Module - Field]
	[tempNMF]:
	Left Keep LOAD *, RowNo() as nmf.counter
	Resident [Namespace - Module - Field]
	Where exists(f.wigiiNamespace, nmf.wigiiNamespace) and Exists(f.modulename, nmf.modulename);
	DROP Table [Namespace - Module - Field];
	RENAME Table [tempNMF] to [Namespace - Module - Field];

	//reduce [Module - Field]
	[tempDTF]:
	Left Keep LOAD *, RowNo() as dtf.counter
	Resident [DT - Field]
	Where Exists([nmf.dt-field], [dtf.dt-field]);
	DROP Table [DT - Field];
	RENAME Table [tempDTF] to [DT - Field];

	//reduce Groups
	[tempGroups]:
	Left Keep LOAD *, RowNo() as Groups.counter
	Resident [Groups]
	Where exists(f.wigiiNamespace, groupWigiiNamespace) and Exists(f.modulename, groupModulename) 
	//remove any trash folders or folders in trash
	and not Exists(idTrashGroup, id_group)
	;
	DROP Table [Groups];
	RENAME Table [tempGroups] to [Groups];
	
	//reduce Element Group paring
	[tempElementGroupPairing]:
	Left Keep LOAD *
	Resident [Element Group pairing]
	Where exists(id_group);
	DROP Table [Element Group pairing];
	RENAME Table [tempElementGroupPairing] to [Element Group pairing];

	//reduce Elements
	[tempElements]:
	Left Keep LOAD *, RowNo() as Elements.counter
	Resident [Elements]
	Where exists(id_element_root) and exists(f.wigiiNamespace, wigiiNamespace) and Exists(f.modulename, modulename) and (isNull(linkName) or not(WildMatch(linkName, '__deleted_*')) or linkName='');
	DROP Table [Elements];
	RENAME Table [tempElements] to [Elements];
else
	//count [Namespace - Module - Field]
	NoConcatenate [tempNMF]:
	LOAD *, RowNo() as nmf.counter
	Resident [Namespace - Module - Field];
	DROP Table [Namespace - Module - Field];
	RENAME Table [tempNMF] to [Namespace - Module - Field];

	//count [Module - Field]
	NoConcatenate [tempDTF]:
	LOAD *, RowNo() as dtf.counter
	Resident [DT - Field];
	DROP Table [DT - Field];
	RENAME Table [tempDTF] to [DT - Field];

	//count Groups
	NoConcatenate [tempGroups]:
	LOAD *, RowNo() as Groups.counter
	Resident [Groups]
	Where 
	//remove any trash folders or folders in trash
	not Exists(idTrashGroup, id_group)
	;
	DROP Table [Groups];
	RENAME Table [tempGroups] to [Groups];

	//reduce Element Group paring
	[tempElementGroupPairing]:
	Left Keep LOAD *
	Resident [Element Group pairing]
	Where exists(id_group);
	DROP Table [Element Group pairing];
	RENAME Table [tempElementGroupPairing] to [Element Group pairing];

	//count Elements
	NoConcatenate [tempElements]:
	LOAD *, RowNo() as Elements.counter
	Resident [Elements]
	where (isNull(linkName) or not(WildMatch(linkName, '__deleted_*')) or linkName='');
	DROP Table [Elements];
	RENAME Table [tempElements] to [Elements];

endif


///$tab Namespace - Module Tables
//**************************
// Create one table per Namespace - Module
//**************************

Let vFieldListLength=peek('nmf.counter',-1,'Namespace - Module - Field');

let vCrtNamespace = '';
let vCrtModule = '';
let valueLabel = '';
FOR i=1 TO $(vFieldListLength)
	
	//peek fieldname, and datatype
	LET vWigiiNamespace = peek('nmf.wigiiNamespace', $(i)-1,'Namespace - Module - Field');
	LET vModule = peek('nmf.modulename', $(i)-1,'Namespace - Module - Field');
	LET vFieldname = peek('nmf.fieldname', $(i)-1,'Namespace - Module - Field');
	LET vDatatype = trim(peek('nmf.datatype', $(i)-1,'Namespace - Module - Field'));
	//last char removed
	LET vDTField = Left('$(vDatatype)', len('$(vDatatype)')-1); //Lower(Left('$(vDatatype)',1))& Right(Left('$(vDatatype)', len('$(vDatatype)')-1), len('$(vDatatype)')-2); //first char lower case, last char removed
	
	//New namespace and module -> create new table
	if '$(vWigiiNamespace)' <> '$(vCrtNamespace)' or '$(vModule)' <> '$(vCrtModule)' then
		
		//store previous table
		if '' <> '$(vCrtNamespace)' or '' <> '$(vCrtModule)' then
			STORE [$(vCrtNamespace).$(vCrtModule)] into [$(vCrtNamespace).$(vCrtModule)].qvd;
			STORE [$(vCrtNamespace).$(vCrtModule)] into [$(vCrtNamespace).$(vCrtModule)].csv (txt); 
			DROP table [$(vCrtNamespace).$(vCrtModule)];
		ENDIF
		
		//prefix all the element subfield with el.
		QUALIFY *;
		NoConcatenate [el]:
		LOAD * 
		Resident [Elements]
		WHERE wigiiNamespace = '$(vWigiiNamespace)' and modulename = '$(vModule)';
		UNQUALIFY *;
		//rename the table el to $(vWigiiNamespace).$(vModule)
		rename Table [el] to [$(vWigiiNamespace).$(vModule)];
	endif
	
	//concatenate all the sub field values to table
	
	//rename subfieldname value  with nothing
	if FieldNumber('$(vFieldname)', '$(vWigiiNamespace).$(vModule)') <> 0 then
		valueLabel = '$(vFieldname).$(vDatatype)';
	ELSE
		valueLabel = '$(vFieldname)';
	endif

	let noOfFields =  NoOfFields('$(vDatatype)');	
	//check if field requires sys fields or not
	if exists('sys.key', '$(vWigiiNamespace)-$(vModule)-$(vFieldname)') then
		let cols = ''; //'value as [$(valueLabel)]';
		for j=4 to $(noOfFields)
			if '$(cols)' <> '' then
				cols = '$(cols), '; //add a coma + space
			ENDIF
			if FieldName($(j) ,'$(vDatatype)') = 'value' then
				//if value, then only fieldname
				cols = '$(cols)'&FieldName($(j) ,'$(vDatatype)')&' as [$(valueLabel)]';
			else
				//if other subfield, then subfield name
				cols = '$(cols)'&FieldName($(j) ,'$(vDatatype)')&' as [$(valueLabel) '&FieldName($(j) ,'$(vDatatype)')&']';
			endif
			
		NEXT
	//check if there is more value fields than value
	elseif $(noOfFields) > 10 then
		let cols = ''; //'value as [$(valueLabel)]';
		for j=4 to $(noOfFields)-6
			if '$(cols)' <> '' then
				cols = '$(cols), '; //add a coma + space
			ENDIF
			if FieldName($(j) ,'$(vDatatype)') = 'value' then
				//if value, then only fieldname
				cols = '$(cols)'&FieldName($(j) ,'$(vDatatype)')&' as [$(valueLabel)]';
			else
				//if other subfield, then subfield name
				cols = '$(cols)'&FieldName($(j) ,'$(vDatatype)')&' as [$(valueLabel) '&FieldName($(j) ,'$(vDatatype)')&']';
			endif
			
		NEXT
	ELSE
		let cols = 'value as [$(valueLabel)]';
	endif
	
	//load only the values
	[$(vFieldname)]:
	Left join LOAD
		id_element as el.id_element, 
		$(cols)
	Resident [$(vDatatype)]
	Where [field] = '$(vFieldname)';
	
	vCrtNamespace = '$(vWigiiNamespace)';
	vCrtModule = '$(vModule)';
NEXT

//store previous table
if '' <> '$(vCrtNamespace)' or '' <> '$(vCrtModule)' then
	STORE [$(vCrtNamespace).$(vCrtModule)] into [$(vCrtNamespace).$(vCrtModule)].qvd;
	STORE [$(vCrtNamespace).$(vCrtModule)] into [$(vCrtNamespace).$(vCrtModule)].csv (txt);
	DROP table [$(vCrtNamespace).$(vCrtModule)];
ENDIF





///$tab Cleanup
//cleanup of Wigii tables
Drop Tables Groups, Elements, [Element Group pairing], Addresses, Attributs, Blobs, Booleans, Dates, Emails, Files, Floats, Links, MultipleAttributs, Numerics, Strings, Texts, TimeRanges, Times, Urls, Varchars;
//cleanup of Field list
Drop Table [Field list];



///$tab Exit

//Groups, Elements, [Element Group pairing], 
//Drop Tables Addresses, Attributs, Blobs, Booleans, Dates, Emails, Files, Floats, Links, MultipleAttributs, Numerics, Strings, Texts, TimeRanges, Times, Urls, Varchars;
//drop Fields sys_user, sys_creationUser, sys_username, sys_creationUsername, sys_date, sys_creationDate;
EXIT Script;


///$tab Field Tables
//**************************
// Create one table per Field
//**************************
//
//Let vFieldListLength=peek('dtf.counter',-1,'DT - Field');
//
//QUALIFY *;
//UNQUALIFY id_element;
//
//FOR i=1 TO $(vFieldListLength)
//	
//	//peek fieldname, and datatype
//	LET vFieldname = peek('dtf.fieldname', $(i)-1,'DT - Field');
//	LET vDatatype = trim(peek('dtf.datatype', $(i)-1,'DT - Field'));
//	//first char lower case, last char removed
//	//LET vDTField = Lower(Left('$(vDatatype)',1))& Right(Left('$(vDatatype)', len('$(vDatatype)')-1), len('$(vDatatype)')-2)&'Field';
//	
//	//create a table for that field
//	NoConcatenate [$(vFieldname)]:
//	load *
//	Resident [$(vDatatype)]
//	where $(vDatatype).field = '$(vFieldname)';
//	
//	//rename table (this is to prevent the qualify to qualify double time the DT
//	RENAME Table [$(vFieldname)] to [$(vDatatype).$(vFieldname)];
//	
//NEXT
//
//UNQUALIFY *;
//
////cleanup of DT tables
//Drop Tables Addresses, Attributs, Blobs, Booleans, Dates, Emails, Files, Floats, Links, MultipleAttributs, Numerics, Strings, Texts, TimeRanges, Times, Urls, Varchars;
//
//